import com.google.protobuf.gradle.*

group = "ru.qa.tinkoff"
version = "1.0-SNAPSHOT"

plugins {
    val springBootVersion = "2.4.2"
    java
    application
    id("io.freefair.lombok") version "5.3.0"
    id("org.springframework.boot") version springBootVersion
    id("org.openapi.generator") version "4.3.1"
    id("io.qameta.allure") version "2.8.1"
    id("com.google.protobuf") version "0.8.17"
}

configurations.implementation {
    exclude(group = "org.apache.logging.log4j", module = "log4j-to-slf4j")
}

repositories {
    maven {
        url = uri("http://nexus-new.tcsbank.ru/content/repositories/inv-platform-core/")
    }
    maven {
        url = uri("http://nexus-new.tcsbank.ru/content/repositories/mvn-tap/")
    }
    maven {
        url = uri("http://nexus-new.tcsbank.ru/content/repositories/mvn-maven-proxy/")
    }
    maven {
        url = uri("http://nexus-new.tcsbank.ru/content/repositories/mvn-invest-sdet-releases/")
    }
    maven {
        url = uri("http://nexus-new.tcsbank.ru/content/repositories/mvn-confluent-proxy/")
    }
    maven {
        url = uri("http://nexus-new.tcsbank.ru/content/repositories/gradle-plugins/")
    }
}

// Custom sourceSet for AutoGenerated classes
sourceSets {
    main {
        java {
            srcDir("$buildDir/generated/sources/swagger/src/main/java")
        }
        java {
            srcDir("$buildDir/generated/source/proto/main/java")
        }
        proto {
            srcDir("src/main/proto")
        }
        java {
            srcDir("$buildDir/generated/source/proto/main/grpc")
        }
    }
}

dependencies {
    implementation("org.jetbrains:annotations:19.0.0")
    val allureVersion = "2.13.7"
    val springVersion = "2.4.2"

    testImplementation("org.springframework.boot:spring-boot-starter-test:$springVersion") {
        exclude("junit", "junit")
        exclude("org.junit.vintage", "junit-vintage-engine")
    }

    implementation("org.hamcrest:hamcrest:2.2")

//    Spring
    implementation("org.springframework.boot:spring-boot-starter-data-jpa:$springVersion")
    implementation("org.springframework.boot:spring-boot-starter-json:$springVersion")
    implementation("org.springframework.boot:spring-boot-starter-validation:$springVersion")
    implementation("org.springframework.boot:spring-boot-configuration-processor:$springVersion")
    annotationProcessor("org.springframework.boot:spring-boot-configuration-processor:$springVersion")
    // Allure
    implementation("io.qameta.allure:allure-java-commons:$allureVersion")
    implementation("io.qameta.allure:allure-rest-assured:$allureVersion")
    implementation("io.qameta.allure:allure-junit5:$allureVersion")
    implementation("ru.tinkoff.invest.sdet:allure-ee-custom-filter:0.0.2")

    // Postgres
    implementation("org.postgresql:postgresql:42.2.14")
    // Dependencies for OpenApi codegen
    implementation("io.swagger:swagger-annotations:1.6.1")
    implementation("org.openapitools:jackson-databind-nullable:0.2.1")
    implementation("com.google.code.findbugs:jsr305:3.0.2")
//  RestAssured
    implementation("io.rest-assured:rest-assured-all:4.3.3")
    implementation("io.rest-assured:rest-assured:4.3.3")

    //kafka
    implementation("org.springframework.kafka:spring-kafka:2.6.4")
    //implementation("ru.tinkoff.invest.sdet:boostedkafka:0.0.7")
    implementation("ru.tinkoff.invest.sdet:boostedkafka:1.0.0-RC3")

    // protobuf
    implementation("io.grpc:grpc-all:1.31.1")
    implementation("com.google.protobuf:protobuf-java:3.15.0")

    // cassandra
    implementation("org.springframework.data:spring-data-cassandra:2.2.9.RELEASE")
    implementation("com.datastax.cassandra:cassandra-driver-mapping:3.7.2")

//    hibernate types
    implementation("com.vladmihalcea:hibernate-types-52:2.10.2")
    // Async waiters
    implementation("org.awaitility:awaitility:4.0.3")

}

configure<JavaPluginConvention> {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

tasks.test {
    useJUnitPlatform {
        systemProperties = mapOf(
            "user.timezone" to "Europe/Moscow",
            "allure.results.directory" to "${buildDir}/allure-results",
            "junit.jupiter.extensions.autodetection.enabled" to "true"
        )

        val includedTags = project.properties["includeTags"] as String?
        val excludedTags = project.properties["excludeTags"] as String?
        if (!includedTags.isNullOrBlank()) {
            println("Included tags: $includedTags");
            includeTags(includedTags)
        }
        if (!excludedTags.isNullOrBlank()) {
            println("Excluded tags: $excludeTags");
            excludeTags(excludedTags)
        }
    }

}


allure {
    version = "2.13.7"
    autoconfigure = true
    aspectjweaver = false
}


// Extension for cleaning additional repo directories
tasks.clean {
    delete("$rootDir/allure-results")
    delete("$rootDir/out")
}

tasks.compileJava {
    dependsOn("RestAssured",
        "RestAssuredAdminApi",
        "generateInvestAccountPublicApi",
        "generateMiofApi",
        "generateTrackingCacheApi",
        "generateTrackingSlaveCacheApi",
        "generateTrackingApiCacheApi",
        "generateFiregApi",
        "generateMDApi",
        "generateSocialTrackingStrategy",
        //"generateTradingApi"
        "generateTariffApi"
    )
}


tasks.register<org.openapitools.generator.gradle.plugin.tasks.GenerateTask>("RestAssured") {
    val openApiPackage = "ru.qa.tinkoff.swagger"
    val path = "$buildDir/generated/sources/swagger"

    inputSpec.set("$projectDir/src/test/resources/swagger/tracking-api.yml")
    outputDir.set(path)

    generateApiTests.set(false)
    skipValidateSpec.set(true)
    generatorName.set("java")
    apiPackage.set("$openApiPackage.tracking.api")
    invokerPackage.set("$openApiPackage.tracking.invoker")
    modelPackage.set("$openApiPackage.tracking.model")
    library.set("rest-assured")
    generateModelDocumentation.set(false)
    generateApiDocumentation.set(false)
    configOptions.set(
        mapOf(
            "dateLibrary" to "java8",
            "serializationLibrary" to "jackson"
        )
    )
}

tasks.register<org.openapitools.generator.gradle.plugin.tasks.GenerateTask>("RestAssuredAdminApi") {
    val openApiPackage = "ru.qa.tinkoff.swagger"
    val path = "$buildDir/generated/sources/swagger"

    inputSpec.set("$projectDir/src/test/resources/swagger/tracking-admin-v1.yml")
    outputDir.set(path)

    generateApiTests.set(false)
    skipValidateSpec.set(true)
    generatorName.set("java")
    apiPackage.set("$openApiPackage.tracking_admin.api")
    invokerPackage.set("$openApiPackage.tracking_admin.invoker")
    modelPackage.set("$openApiPackage.tracking_admin.model")
    library.set("rest-assured")
    generateModelDocumentation.set(false)
    generateApiDocumentation.set(false)
    configOptions.set(
        mapOf(
            "dateLibrary" to "java8",
            "serializationLibrary" to "jackson"
        )
    )
}

tasks.register<org.openapitools.generator.gradle.plugin.tasks.GenerateTask>("generateInvestAccountPublicApi") {
    val openApiPackage = "ru.qa.tinkoff.swagger"
    val path = "$buildDir/generated/sources/swagger"

    inputSpec.set("$projectDir/src/test/resources/swagger/invest-account-public-api-v1.yml")
    outputDir.set(path)

    generateApiTests.set(false)
    skipValidateSpec.set(true)
    generatorName.set("java")
    apiPackage.set("$openApiPackage.investAccountPublic.api")
    invokerPackage.set("$openApiPackage.investAccountPublic.invoker")
    modelPackage.set("$openApiPackage.investAccountPublic.model")
    library.set("rest-assured")
    generateModelDocumentation.set(false)
    generateApiDocumentation.set(false)
    configOptions.set(
        mapOf(
            "dateLibrary" to "java8",
            "serializationLibrary" to "jackson"
        )
    )
}

tasks.register<org.openapitools.generator.gradle.plugin.tasks.GenerateTask>("generateMiofApi") {
    val openApiPackage = "ru.qa.tinkoff.swagger"
    val path = "$buildDir/generated/sources/swagger"

    inputSpec.set("$projectDir/src/test/resources/swagger/miof-api.yml")
    outputDir.set(path)

    generateApiTests.set(false)
    skipValidateSpec.set(true)
    generatorName.set("java")
    apiPackage.set("$openApiPackage.miof.api")
    invokerPackage.set("$openApiPackage.miof.invoker")
    modelPackage.set("$openApiPackage.miof.model")
    library.set("rest-assured")
    generateModelDocumentation.set(false)
    generateApiDocumentation.set(false)
    configOptions.set(
        mapOf(
            "dateLibrary" to "java8",
            "serializationLibrary" to "jackson"
        )
    )
}


tasks.register<org.openapitools.generator.gradle.plugin.tasks.GenerateTask>("generateTrackingCacheApi") {
    val openApiPackage = "ru.qa.tinkoff.swagger"
    val path = "$buildDir/generated/sources/swagger"

    inputSpec.set("$projectDir/src/test/resources/swagger/tracking-cache-v1.yml")
    outputDir.set(path)

    generateApiTests.set(false)
    skipValidateSpec.set(true)
    generatorName.set("java")
    apiPackage.set("$openApiPackage.trackingCache.api")
    invokerPackage.set("$openApiPackage.trackingCache.invoker")
    modelPackage.set("$openApiPackage.trackingCache.model")
    library.set("rest-assured")
    generateModelDocumentation.set(false)
    generateApiDocumentation.set(false)
    configOptions.set(
        mapOf(
            "dateLibrary" to "java8",
            "serializationLibrary" to "jackson"
        )
    )
}

tasks.register<org.openapitools.generator.gradle.plugin.tasks.GenerateTask>("generateTrackingSlaveCacheApi") {
    val openApiPackage = "ru.qa.tinkoff.swagger"
    val path = "$buildDir/generated/sources/swagger"

    inputSpec.set("$projectDir/src/test/resources/swagger/tracking-cache-slave-v1.yml")
    outputDir.set(path)

    generateApiTests.set(false)
    skipValidateSpec.set(true)
    generatorName.set("java")
    apiPackage.set("$openApiPackage.trackingSlaveCache.api")
    invokerPackage.set("$openApiPackage.trackingSlaveCache.invoker")
    modelPackage.set("$openApiPackage.trackingSlaveCache.model")
    library.set("rest-assured")
    generateModelDocumentation.set(false)
    generateApiDocumentation.set(false)
    configOptions.set(
        mapOf(
            "dateLibrary" to "java8",
            "serializationLibrary" to "jackson"
        )
    )
}



tasks.register<org.openapitools.generator.gradle.plugin.tasks.GenerateTask>("generateFiregApi") {
    val openApiPackage = "ru.qa.tinkoff.swagger"
    val path = "$buildDir/generated/sources/swagger"

    inputSpec.set("$projectDir/src/test/resources/swagger/fireg/swagger.yaml")
    outputDir.set(path)

    generateApiTests.set(false)
    skipValidateSpec.set(true)
    generatorName.set("java")
    apiPackage.set("$openApiPackage.fireg.api")
    invokerPackage.set("$openApiPackage.fireg.invoker")
    modelPackage.set("$openApiPackage.fireg.model")
    library.set("rest-assured")
    generateModelDocumentation.set(false)
    generateApiDocumentation.set(false)

    typeMappings.put("float", "java.math.BigDecimal")
    typeMappings.put("double", "java.math.BigDecimal")

    configOptions.set(
        mapOf(
            "dateLibrary" to "java8",
            "serializationLibrary" to "jackson"
        )
    )
}


tasks.register<org.openapitools.generator.gradle.plugin.tasks.GenerateTask>("generateMDApi") {
    val openApiPackage = "ru.qa.tinkoff.swagger"
    val path = "$buildDir/generated/sources/swagger"

    inputSpec.set("$projectDir/src/test/resources/swagger/md-api.yml")
    outputDir.set(path)

    generateApiTests.set(false)
    skipValidateSpec.set(true)
    generatorName.set("java")
    apiPackage.set("$openApiPackage.MD.api")
    invokerPackage.set("$openApiPackage.MD.invoker")
    modelPackage.set("$openApiPackage.MD.model")
    library.set("rest-assured")
    generateModelDocumentation.set(false)
    generateApiDocumentation.set(false)
    configOptions.set(
        mapOf(
            "dateLibrary" to "java8",
            "serializationLibrary" to "jackson"
        )
    )
}

tasks.register<org.openapitools.generator.gradle.plugin.tasks.GenerateTask>("generateSocialTrackingStrategy") {
    val openApiPackage = "ru.qa.tinkoff.swagger"
    val path = "$buildDir/generated/sources/swagger"

    inputSpec.set("$projectDir/src/test/resources/swagger/tracking-strategy-v1.yml")
    outputDir.set(path)

    generateApiTests.set(false)
    skipValidateSpec.set(true)
    generatorName.set("java")
    apiPackage.set("$openApiPackage.tracking_socialTrackingStrategy.api")
    invokerPackage.set("$openApiPackage.tracking_socialTrackingStrategy.invoker")
    modelPackage.set("$openApiPackage.tracking_socialTrackingStrategy.model")
    library.set("rest-assured")
    generateModelDocumentation.set(false)
    generateApiDocumentation.set(false)
    configOptions.set(
        mapOf(
            "dateLibrary" to "java8",
            "serializationLibrary" to "jackson"
        )
    )
}

tasks.register<org.openapitools.generator.gradle.plugin.tasks.GenerateTask>("generateTrackingApiCacheApi") {
    val openApiPackage = "ru.qa.tinkoff.swagger"
    val path = "$buildDir/generated/sources/swagger"

    inputSpec.set("$projectDir/src/test/resources/swagger/tracking-cache-api-v1.yml")
    outputDir.set(path)

    generateApiTests.set(false)
    skipValidateSpec.set(true)
    generatorName.set("java")
    apiPackage.set("$openApiPackage.trackingApiCache.api")
    invokerPackage.set("$openApiPackage.trackingApiCache.invoker")
    modelPackage.set("$openApiPackage.trackingApiCache.model")
    library.set("rest-assured")
    generateModelDocumentation.set(false)
    generateApiDocumentation.set(false)
    configOptions.set(
            mapOf(
                    "dateLibrary" to "java8",
                    "serializationLibrary" to "jackson"
            )
    )
}


//tasks.register<org.openapitools.generator.gradle.plugin.tasks.GenerateTask>("generateTradingApi") {
//    val openApiPackage = "ru.qa.tinkoff.swagger"
//    val path = "$buildDir/generated/sources/swagger"
//
//    inputSpec.set("$projectDir/src/test/resources/swagger/trading-api.yml")
//    outputDir.set(path)
//
//    generateApiTests.set(false)
//    skipValidateSpec.set(true)
//    generatorName.set("java")
//    apiPackage.set("$openApiPackage.trading.api")
//    invokerPackage.set("$openApiPackage.trading.invoker")
//    modelPackage.set("$openApiPackage.trading.model")
//    library.set("rest-assured")
//    generateModelDocumentation.set(false)
//    generateApiDocumentation.set(false)
//    configOptions.set(
//        mapOf(
//            "dateLibrary" to "java8",
//            "serializationLibrary" to "jackson"
//        )
//    )
//}

tasks.register<org.openapitools.generator.gradle.plugin.tasks.GenerateTask>("generateTariffApi") {
    val openApiPackage = "ru.qa.tinkoff.swagger"
    val path = "$buildDir/generated/sources/swagger"

    inputSpec.set("$projectDir/src/test/resources/swagger/tariff-module.yml")
    outputDir.set(path)

    generateApiTests.set(false)
    skipValidateSpec.set(true)
    generatorName.set("java")
    apiPackage.set("$openApiPackage.Tariff.api")
    invokerPackage.set("$openApiPackage.Tariff.invoker")
    modelPackage.set("$openApiPackage.Tariff.model")
    library.set("rest-assured")
    generateModelDocumentation.set(false)
    generateApiDocumentation.set(false)
    configOptions.set(
        mapOf(
            "dateLibrary" to "java8",
            "serializationLibrary" to "jackson"
        )
    )
}




protobuf {
    protoc {
        // The artifact spec for the Protobuf Compiler
        artifact = "com.google.protobuf:protoc:3.15.0"
    }
    plugins {
        // Optional: an artifact spec for a protoc plugin, with "grpc" as
        // the identifier, which can be referred to in the "plugins"
        // container of the "generateProtoTasks" closure.
        id("grpc") {
            artifact = "io.grpc:protoc-gen-grpc-java:1.31.1"
        }
    }
    generateProtoTasks {
        ofSourceSet("main").forEach {
            it.plugins {
                // Apply the "grpc" plugin whose spec is defined above, without options.
                id("grpc")
            }
        }
    }
}